---

# NOTE: Some of the variables are only defined in inventory vars for
# all groups. This file is updated by terraform execution
#
# Run from ansible directory (after terraform vars gen) using
# ansible-playbook -i inventory/inventory ./playbooks/provision-prefect-agent.yml
#
# Docker image authentication take from StackOverflow 63723674

- name: Setup EC2 play
  hosts: local
  gather_facts: false

  vars:
    ec2_prefix: odssm-ec2-prefect-agent
    ec2_inventory_name: local_ec2_agent
    user_name: ec2-user
    # ansible var cannot use '-'
    ansible_group: prefect_agent
    ansible_vars_group: vars_from_terraform


  tasks:
  - name: Setup EC2 task
    block:
    - name: Verify connectivity to EC2
      ansible.builtin.wait_for:
        host: "{{ ec2_public_ip }}"
        port: 22
        state: started

    - name: Add instance to group
      ansible.builtin.add_host:
        name: "{{ ec2_inventory_name }}"
        ansible_host: "{{ ec2_public_ip }}"
        ansible_user: "{{ user_name }}"
        instance_name: "{{ ec2_prefix }}"
        groups:
          - "{{ ansible_group }}"
          - "{{ ansible_vars_group }}"

    - name: Print instance group
      debug:
        var: ansible_group

  tags:
    - setup


- name: Configure Prefect agent host
  hosts: prefect_agent
  gather_facts: True
  become: True

  # TODO: Use --key instead of --token for Prefect
  vars:
    key: "{{ lookup('env', 'PREFECT2_API_KEY') }}"
    rdhpcs_s3_access_key_id: "{{ lookup('env', 'RDHPCS_S3_ACCESS_KEY_ID') }}"
    rdhpcs_s3_secret_access_key: "{{ lookup('env', 'RDHPCS_S3_SECRET_ACCESS_KEY') }}"
    pw_api_key: "{{ lookup('env', 'PW_API_KEY') }}"
    efs_mount_dir: /efs
    docker_image: "{{ prefect_image }}:v0.5"
    cdsapi_url: "{{ lookup('env', 'CDSAPI_URL') }}"
    cdsapi_key: "{{ lookup('env', 'CDSAPI_KEY') }}"
#    ansible_python_interpreter: /usr/bin/python3

  tasks:
    - name: Install packages 
      yum:
        name:
          - docker
          - python-pip
          - python-devel
          - "@Development tools"
          - nfs-utils
          - amazon-efs-utils
        state: present

    - name: Start Docker
      ansible.builtin.systemd:
        name: docker
        state: started

    - name: Start NFS (used to mount EFS) 
      ansible.builtin.systemd:
        name: nfs 
        state: started

    - name: Update pip
      pip:
        name: pip
        extra_args: --upgrade

    - name: Install wheel
      pip:
        name: wheel

    - name: Install Ansible
      pip:
        name:
          - ansible

    - name: Install Docker python package
      pip:
        name:
          - docker
        # Needed to deal with older requests which is not installed via pip
        extra_args: --ignore-installed

    - name: Install urllib3
      pip:
        name: urllib3
        extra_args: --force

    - name: Install requests
      pip:
        name: requests

    - name: Create mount directory
      file:
        path: "{{ efs_mount_dir }}"
        state: directory
        mode: 0755

    - name: Mount EFS volume
      mount:
        name: "{{ efs_mount_dir }}"
        src: "{{ efs_id }}.efs.{{ aws_default_region }}.amazonaws.com:/"
        fstype: nfs4
        opts: nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport
        state: mounted

    - name: Make sure volume has rw permissions
      file:
        path: "{{ efs_mount_dir }}"
        state: directory
        mode: 0755

    - name: ECR Docker authentication
      shell: "aws ecr get-authorization-token"
      environment:
          AWS_DEFAULT_REGION: "{{ aws_default_region }}"
          # fixes aws-cli command output issue
          AWS_PAGER: ""
      register: ecr_command
    
    - set_fact:
        ecr_authorization_data: "{{ (ecr_command.stdout | from_json).authorizationData[0] }}"
    
    - set_fact:
        ecr_credentials: "{{ (ecr_authorization_data.authorizationToken | b64decode).split(':') }}"
    
    - name: Login to ECR on Docker
      docker_login:
        registry: "{{ ecr_authorization_data.proxyEndpoint.rpartition('//')[2] }}"
        username: "{{ ecr_credentials[0] }}"
        password: "{{ ecr_credentials[1] }}"
        reauthorize: yes

    - name: Register Prefect agent
      docker_container:
        name: "prefect-ec2"
        image: "{{ docker_image }}"
        container_default_behavior: "compatibility"
        env:
          AWS_DEFAULT_REGION: "{{ aws_default_region }}"
          # fixes aws-cli command output issue
          AWS_PAGER: ""
          CDSAPI_URL: "{{ cdsapi_url }}"
          CDSAPI_KEY: "{{ cdsapi_key }}"

        volumes:
          - /efs:/efs
        command: sh -c "prefect cloud login --key "{{ key }}" --workspace sorooshmaninoaagov/ondemand-workflow && prefect agent start -q test-ec2"
        state: started

    - name: Register Prefect agent 2
      docker_container:
        name: "prefect-pw-local"
        image: "{{ docker_image }}"
        container_default_behavior: "compatibility"
        env:
          AWS_ACCESS_KEY_ID: "{{ rdhpcs_s3_access_key_id }}"
          AWS_SECRET_ACCESS_KEY: "{{ rdhpcs_s3_secret_access_key }}"
          PW_API_KEY: "{{ pw_api_key }}"
          # fixes aws-cli command output issue
          AWS_PAGER: ""
          CDSAPI_URL: "{{ cdsapi_url }}"
          CDSAPI_KEY: "{{ cdsapi_key }}"
        volumes:
          - /efs:/efs
        command: sh -c "prefect cloud login --key "{{ key }}" --workspace sorooshmaninoaagov/ondemand-workflow && prefect agent start -q test-pw-local"
        state: started

    - name: Register Prefect agent 3
      docker_container:
        name: "prefect-ecs"
        image: "{{ docker_image }}"
        container_default_behavior: "compatibility"
        env:
          AWS_DEFAULT_REGION: "{{ aws_default_region }}"
          # fixes aws-cli command output issue
          AWS_PAGER: ""
          CDSAPI_URL: "{{ cdsapi_url }}"
          CDSAPI_KEY: "{{ cdsapi_key }}"

        volumes:
          - /efs:/efs
        command: sh -c "prefect cloud login --key "{{ key }}" --workspace sorooshmaninoaagov/ondemand-workflow && prefect agent start -q test-ecs"
        state: started


  tags:
    - config
